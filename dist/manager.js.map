{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/ThemeSelector.tsx","../node_modules/@storybook/icons/src/icons/MirrorIcon.tsx","../node_modules/@storybook/icons/src/icons/GrowIcon.tsx"],"names":["addons","types","ADDON_ID","THEME_ID","PARAM_KEY","THEME_NAME_KEY","useGlobals","useParameter","IconButton","TooltipLinkList","WithTooltip","React","Fragment","memo","useCallback","useMemo","PaintBrushIcon","color","size","props","forwardedRef","iframeId","createThemeSelectorItem","name","value","change","active","DEFAULT_THEMES_CONFIG","getThemeObjectByName","currentSelectedName","themes","defaultThemeName","currentTheme","theme","defaultTheme","ThemeSelector","themesConfig","globals","updateGlobals","globalsThemeName","selectedTheme","selected","onThemeChange","themeSelectorItems","_themes","x","changeTheme","targetEl","iframe","current","viewMode"],"mappings":"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","sourcesContent":["import { addons, types } from \"storybook/manager-api\";\n\nimport { ADDON_ID, THEME_ID } from \"./constants\";\nimport { ThemeSelector } from \"./ThemeSelector\";\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the tool\n  addons.add(THEME_ID, {\n    type: types.TOOL,\n    title: \"Themes\",\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: ThemeSelector\n  });\n});\n","export const ADDON_ID = \"storybook/multiple-themes-stitches\";\nexport const THEME_ID = `${ADDON_ID}/theme`;\nexport const PARAM_KEY = `multipleThemesStitches`;\nexport const THEME_NAME_KEY = `themeName`;\n","import { useGlobals, useParameter } from \"storybook/manager-api\";\nimport {\n  IconButton,\n  TooltipLinkList,\n  WithTooltip,\n} from \"storybook/internal/components\";\nimport React, { FC, Fragment, memo, useCallback, useMemo } from \"react\";\nimport { PARAM_KEY, THEME_NAME_KEY } from \"./constants\";\nimport {\n  GlobalThemeState,\n  Theme,\n  ThemeObject,\n  ThemeSelectorItem,\n  ThemesParameter,\n} from \"./types\";\nimport { PaintBrushIcon } from \"@storybook/icons\";\n\nconst iframeId = \"storybook-preview-iframe\";\n\nconst createThemeSelectorItem = (\n  name: string,\n  value: ThemeObject | undefined | null,\n  change: (arg: { selected: ThemeObject | undefined | null; name: string | undefined | null }) => void,\n  active: boolean\n): ThemeSelectorItem => ({\n  id: name,\n  title: name,\n  onClick: () => {\n    change({ selected: value, name });\n  },\n  value,\n  active,\n});\n\nconst DEFAULT_THEMES_CONFIG: ThemesParameter = {\n  disable: true,\n  values: [],\n};\n\nconst getThemeObjectByName = (\n  currentSelectedName: string | undefined | null,\n  themes: Theme[],\n  defaultThemeName: string | undefined\n) => {\n  if (currentSelectedName === null) {\n    return null;\n  }\n\n  if (currentSelectedName) {\n    const currentTheme = themes.find(\n      (theme) => theme.name === currentSelectedName\n    );\n    if (currentTheme) {\n      return currentTheme;\n    }\n  }\n  if (defaultThemeName) {\n    const defaultTheme = themes.find(\n      (theme) => theme.name === defaultThemeName\n    );\n    if (defaultTheme) {\n      return defaultTheme;\n    }\n  }\n  return null;\n};\n\n// TODO: add support for default theme\nexport const ThemeSelector: FC = memo(() => {\n  const themesConfig = useParameter<ThemesParameter>(\n    PARAM_KEY,\n    DEFAULT_THEMES_CONFIG\n  );\n  const themes = themesConfig.values;\n  const defaultTheme = themesConfig.default;\n  const [globals, updateGlobals] = useGlobals();\n\n  const globalsThemeName: string = globals[THEME_NAME_KEY];\n\n  const selectedTheme = useMemo(() => {\n    return getThemeObjectByName(globalsThemeName, themes, defaultTheme);\n  }, [globalsThemeName, defaultTheme, themes]);\n  const change = ({ name, selected }: GlobalThemeState) => {\n    onThemeChange(name, selected);\n  };\n\n  const themeSelectorItems: ThemeSelectorItem[] = [\n    createThemeSelectorItem(\"Clear theme\", null, change, false),\n  ];\n\n  if (themes.length) {\n    const _themes = themes.map((x) => ({\n      name: x.name,\n      theme: { className: x.theme.className },\n    }));\n\n    themeSelectorItems.push(\n      ..._themes.map(({ name, theme }) =>\n        createThemeSelectorItem(\n          name,\n          theme,\n          change,\n          name === selectedTheme?.name\n        )\n      )\n    );\n  }\n\n  const changeTheme = (selected: ThemeObject | undefined | null) => {\n    let targetEl: HTMLElement;\n    const iframe = document.getElementById(iframeId) as any;\n\n    if (iframe) {\n      const iframeDocument =\n        iframe.contentDocument || iframe.contentWindow.document;\n\n      targetEl = iframeDocument.body;\n\n      // Remove all theme class(es).\n      themesConfig.values\n        .filter((theme) => theme.theme)\n        .forEach((current) => {\n          if (current?.theme?.className) {\n            targetEl.classList.remove(current.theme.className);\n          }\n        });\n\n      if (selected) {\n        // Add selected theme class(es).\n        targetEl.className = selected.className;\n      }\n    }\n  }\n\n  const onThemeChange = useCallback(\n    (name: string | null | undefined, selected: ThemeObject | undefined | null) => {\n      updateGlobals({\n        [THEME_NAME_KEY]: selected ? name : null,\n      });\n    },\n    [themesConfig, globals, updateGlobals]\n  );\n\n  if (themesConfig.disable) {\n    return null;\n  }\n  changeTheme(selectedTheme?.theme);\n  return (\n    <Fragment>\n      <WithTooltip\n        placement=\"top\"\n        trigger=\"click\"\n        closeOnOutsideClick\n        tooltip={<TooltipLinkList links={themeSelectorItems} />}\n      >\n        <IconButton\n          key=\"theme\"\n          title=\"Change the theme of the preview\"\n          active={selectedTheme !== null}\n        >\n          <PaintBrushIcon />\n        </IconButton>\n      </WithTooltip>\n    </Fragment>\n  );\n});\n","import * as React from 'react';\nimport { IconProps } from '../types';\n\nexport const MirrorIcon = /* @__PURE__ */ React.forwardRef<\n  SVGSVGElement,\n  IconProps\n>(({ color = 'currentColor', size = 14, ...props }, forwardedRef) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 14 14\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={forwardedRef}\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M1 1.504a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11zm1 10.5h10v-10l-10 10z\"\n        fill={color}\n      />\n    </svg>\n  );\n});\n","import * as React from 'react';\nimport { IconProps } from '../types';\n\nexport const GrowIcon = /* @__PURE__ */ React.forwardRef<\n  SVGSVGElement,\n  IconProps\n>(({ color = 'currentColor', size = 14, ...props }, forwardedRef) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 14 14\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={forwardedRef}\n      {...props}\n    >\n      <path\n        d=\"M1.5 1.004a.5.5 0 100 1H12v10.5a.5.5 0 001 0v-10.5a1 1 0 00-1-1H1.5z\"\n        fill={color}\n      />\n      <path\n        d=\"M1 3.504a.5.5 0 01.5-.5H10a1 1 0 011 1v8.5a.5.5 0 01-1 0v-8.5H1.5a.5.5 0 01-.5-.5z\"\n        fill={color}\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M1.5 5.004a.5.5 0 00-.5.5v7a.5.5 0 00.5.5h7a.5.5 0 00.5-.5v-7a.5.5 0 00-.5-.5h-7zm.5 1v6h6v-6H2z\"\n        fill={color}\n      />\n    </svg>\n  );\n});\n"]}